<?php

Class Notes_model extends MY_model {

    

    public function __construct() {

        parent::__construct();
        $this->load->database();

    }

    var $table = 'notes';

    var $column_order = array('id',null,null); //set column field database for datatable orderable

    var $column_search = array('id',null); //set column field database for datatable searchable just firstname , lastname , address are searchable

    var $order = array('id' => 'desc');


  private function get_datatables_query($id='')
  {     
      if ($this->userAdminDetails->role == 'user') {
        $this->db->from($this->table);
        $this->db->where('user_id',$id);
        $this->db->join('subject', 'subject.sub_id = notes.sub_id');
        $this->db->join('course', 'course.course_id = notes.course_id');
        $this->db->join('level', 'level.level_id = notes.level_id');
        $i = 0;
        foreach ($this->column_search as $item) // loop column 
        {
        if($_POST['search']['value']) // if datatable send POST for search
        {
        if($i===0) // first loop
        {
        $this->db->group_start(); // open bracket. query Where with OR clause better with bracket. because maybe can combine with other WHERE with AND.
        $this->db->like($item, $_POST['search']['value']);
        }
        else
        {
        $this->db->or_like($item, $_POST['search']['value']);
        }

        if(count($this->column_search) - 1 == $i) //last loop
        $this->db->group_end(); //close bracket
        }
        $i++;
        }

        if(isset($_POST['order'])) // here order processing
        {
        $this->db->order_by($this->column_order[$_POST['order']['0']['column']], $_POST['order']['0']['dir']);
        } 
        else if(isset($this->order))
        {
        $order = $this->order;
        $this->db->order_by(key($order), $order[key($order)]);
        }
  }
    else{
        $this->db->from($this->table);
        $this->db->join('subject', 'subject.sub_id = notes.sub_id');
        $this->db->join('course', 'course.course_id = notes.course_id');
        $this->db->join('level', 'level.level_id = notes.level_id');
        $i = 0;
        foreach ($this->column_search as $item) // loop column 
        {
        if($_POST['search']['value']) // if datatable send POST for search
        {
        if($i===0) // first loop
        {
        $this->db->group_start(); // open bracket. query Where with OR clause better with bracket. because maybe can combine with other WHERE with AND.
        $this->db->like($item, $_POST['search']['value']);
        }
        else
        {
        $this->db->or_like($item, $_POST['search']['value']);
        }

        if(count($this->column_search) - 1 == $i) //last loop
        $this->db->group_end(); //close bracket
        }
        $i++;
        }

        if(isset($_POST['order'])) // here order processing
        {
        $this->db->order_by($this->column_order[$_POST['order']['0']['column']], $_POST['order']['0']['dir']);
        } 
        else if(isset($this->order))
        {
        $order = $this->order;
        $this->db->order_by(key($order), $order[key($order)]);
    
        } 
    }
}
    public function get_datatables() {

        $this->get_datatables_query($this->userAdminDetails->id);
        if($_POST['length'] != -1)
        $this->db->limit($_POST['length'], $_POST['start']);
        $query = $this->db->get();
        return $query->result_array();
    }


    public function count_filtered() {

        $this->get_datatables_query();
        //$this->db->where('parent_id',0);
        $query = $this->db->get();
        return $query->num_rows();
    }

    public function count_all() {

        $this->db->from($this->table);
        //$this->db->where('parent_id',0);
        return $this->db->count_all_results();
    }

    public function get_by_id($id) {

        $this->db->from($this->table);
        $this->db->where('id',$id);
        $query = $this->db->get();
        return $query->row();
    }
    //json load view end //

    public function insertNotes($value) { 

        if ($this->db->insert($this->table, $value)) {

            return true;

        } else{

            return false;

        }


    }

    public function getNotesEdit($id='')
    {
        $this->db->from($this->table);
        if ($id != '')
        $this->db->where('id', $id);
        $this->db->order_by('id','desc');
        $query = $this->db->get();
        return $query->result_array();
    }

    public function updateNotes($id,$value)
    {
        $this->db->where('id',$id);
        $this->db->update($this->table,$value);

       
    }


    public function deleteNotes($id)
    {
       $this->db->where('id',$id);
       $this->db->delete($this->table);  
     
    }
    
         public function getSubject($parent = 0, $spacing = '', $category_tree_array = '')
    {

        if (!is_array($category_tree_array))
            $category_tree_array = array();

        $this->db->from('subject');
        $this->db->where('parent_id', $parent);
        $this->db->order_by('sub_id','asc');
        $query = $this->db->get();

        if ($query->num_rows() > 0) {


            foreach($query->result_array() as $rowCategories){

            
                $category_tree_array[] = array("sub_id" => $rowCategories['sub_id'], "sub_name" => $spacing . $rowCategories['sub_name']);
                $category_tree_array = $this->getSubject($rowCategories['sub_id'], '&nbsp;&nbsp;&nbsp;&nbsp;'.$spacing . '-&nbsp;', $category_tree_array);
            }
        }

        return $category_tree_array;
    }


    public function getCourse(){


    $this->db->select('course,course_id');
    $this->db->from('course');

    $query = $this->db->get();


    
        return $query->result_array();
    
    }

    public function getLevel(){


    $this->db->select('level,level_id');
    $this->db->from('level');

    $query = $this->db->get();


    
        return $query->result_array();
    
    }

        public function getparent($cat_id='')
    {

        if( !empty($cat_id) ) {

            $query =$this->db->query("SELECT p10.parent_id as parent10_id, p9.parent_id as parent9_id, p8.parent_id as parent8_id, p7.parent_id as parent7_id, p6.parent_id as parent6_id, p5.parent_id as parent5_id, p4.parent_id as parent4_id, p3.parent_id as parent3_id, 
            p2.parent_id as parent2_id, p1.parent_id as parent_id, p1.sub_id as sub_id, p1.sub_name from subject
            p1 left join subject p2 on p2.parent_id = p1.sub_id 
            left join subject p3 on p3.parent_id= p2.sub_id
            left join subject p4 on p4.parent_id= p3.sub_id 
            left join subject p5 on p5.parent_id= p4.sub_id 
            left join subject p6 on p6.parent_id =p5.sub_id 
            left join subject p7 on p7.parent_id =p6.sub_id
            left join subject p8 on p8.parent_id =p7.sub_id
            left join subject p9 on p9.parent_id =p8.sub_id
            left join subject p10 on p10.parent_id =p9.sub_id
            where $cat_id in (p1.sub_id, p2.sub_id, p3.sub_id, p4.sub_id, p5.sub_id, p6.sub_id, p7.sub_id, p8.sub_id, p9.sub_id, p10.sub_id) and p1.parent_id=0  order by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 LIMIT 1");

            $result = $query->result_array();

            if(!empty($result))
            {
                $result=$result[0];
            }


           
        }
        
        return $result;

    }

}